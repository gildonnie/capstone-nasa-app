{"ast":null,"code":"/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  apData: {},\n  loading: true,\n  error: false\n}; // export const fetchData = createAsyncThunk(\n//   'data/fetchData',\n//   async () => {\n//     const dataRes = await axios\n//       .get(`https://api.nasa.gov/planetary/apod?api_key=${apiKey}`);\n//     console.log(dataRes);\n//     return dataRes.data;\n//   },\n// );\n\nexport const apodSlice = createSlice({\n  name: 'data',\n  initialState,\n  reducers: {\n    setData(state, _ref) {\n      let {\n        payload\n      } = _ref;\n      state.apData = payload;\n    },\n\n    setNewDate(state, _ref2) {\n      let {\n        payload\n      } = _ref2;\n    }\n\n  } // extraReducers(builder) {\n  //   builder\n  //     .addCase(fetchData.pending, (state) => {\n  //       state.error = false;\n  //       state.loading = true;\n  //     })\n  //     .addCase(fetchData.fulfilled, (state, { payload }) => {\n  //       state.error = false;\n  //       state.loading = false;\n  //       state.data = payload;\n  //     })\n  //     .addCase(fetchData.rejected, (state) => {\n  //       state.error = true;\n  //       state.loading = false;\n  //     });\n  // },\n\n});\nexport const {\n  setData\n} = apodSlice.actions;\nexport const getApod = state => state;\nexport default apodSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","apData","loading","error","apodSlice","name","reducers","setData","state","payload","setNewDate","actions","getApod","reducer"],"sources":["C:/Users/gildo/capstone-nasa-app/client/src/store/apodSlice.ts"],"sourcesContent":["/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport { stat } from 'fs';\nimport { RootState } from '.';\n\ntype dataApodTypes = {\n  title: string,\n  explanation: string,\n  url: string\n  date: string;\n }\n\ntype dataApod = {\n  apData: dataApodTypes;\n  loading: boolean;\n  error: boolean;\n}\n\nconst initialState = {\n  apData: {},\n  loading: true,\n  error: false,\n} as dataApod;\n\n// export const fetchData = createAsyncThunk(\n//   'data/fetchData',\n//   async () => {\n//     const dataRes = await axios\n//       .get(`https://api.nasa.gov/planetary/apod?api_key=${apiKey}`);\n//     console.log(dataRes);\n//     return dataRes.data;\n//   },\n// );\n\nexport const apodSlice = createSlice({\n  name: 'data',\n  initialState,\n  reducers: {\n    setData(state, { payload }) {\n      state.apData = payload;\n    },\n    setNewDate(state, { payload }){\n\n    },\n  },\n  // extraReducers(builder) {\n  //   builder\n  //     .addCase(fetchData.pending, (state) => {\n  //       state.error = false;\n  //       state.loading = true;\n  //     })\n  //     .addCase(fetchData.fulfilled, (state, { payload }) => {\n  //       state.error = false;\n  //       state.loading = false;\n  //       state.data = payload;\n  //     })\n  //     .addCase(fetchData.rejected, (state) => {\n  //       state.error = true;\n  //       state.loading = false;\n  //     });\n  // },\n});\n\nexport const { setData } = apodSlice.actions;\nexport const getApod = (state: RootState) => state;\nexport default apodSlice.reducer;\n"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,kBAA5B;AAiBA,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,EADW;EAEnBC,OAAO,EAAE,IAFU;EAGnBC,KAAK,EAAE;AAHY,CAArB,C,CAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,SAAS,GAAGL,WAAW,CAAC;EACnCM,IAAI,EAAE,MAD6B;EAEnCL,YAFmC;EAGnCM,QAAQ,EAAE;IACRC,OAAO,CAACC,KAAD,QAAqB;MAAA,IAAb;QAAEC;MAAF,CAAa;MAC1BD,KAAK,CAACP,MAAN,GAAeQ,OAAf;IACD,CAHO;;IAIRC,UAAU,CAACF,KAAD,SAAoB;MAAA,IAAZ;QAAEC;MAAF,CAAY;IAE7B;;EANO,CAHyB,CAWnC;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;AA1BmC,CAAD,CAA7B;AA6BP,OAAO,MAAM;EAAEF;AAAF,IAAcH,SAAS,CAACO,OAA9B;AACP,OAAO,MAAMC,OAAO,GAAIJ,KAAD,IAAsBA,KAAtC;AACP,eAAeJ,SAAS,CAACS,OAAzB"},"metadata":{},"sourceType":"module"}